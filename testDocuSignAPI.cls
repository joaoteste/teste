@isTest (SeeAllData = true)
public class testDocuSignAPI implements WebServiceMock{
      
    public  void doInvoke(
        Object stub,
        Object request,
        Map<String, Object> response, 
        String endpoint,
        String soapAction,
        String requestName,
        String responseNS,
        String responseName,
        String responseType) {
            // Create response element from the autogenerated class.
            // Populate response element.
            // Add response element to the response parameter, as follows:
            response.put('response_x', testDocuSignAPI.getInfoFromExternalService(endpoint));
        } 
   
    // used to test callout to WebService
    public static HttpResponse getInfoFromExternalService(String endpoint) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(endpoint);
        req.setMethod('GET');
        Http h = new Http();
        HttpResponse res = h.send(req);
        return res;
    }
    
    @isTest
    public static void testeDocuSignAPI() {
        // test WebService CallOut
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        mock.setStaticResource('testreport');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'text/xml');
        Test.setMock(HttpCalloutMock.class, mock);
        HttpResponse res=testDocuSignAPI.getInfoFromExternalService('http://api.salesforce.com/foo/bar');
        
        testDocuSignAPI p =new testDocuSignAPI(); 
        Test.setMock(WebServiceMock.class, p);
        
        DocuSignAPI.APIServiceSoap dsAPISend = new DocuSignAPI.APIServiceSoap();
        dsApiSend.endpoint_x = 'https://demo.docusign.net/api/3.0/dsapi.asmx';
        
        String accountId = '0672109e-97e2-4602-916f-a4dac00697e3';
        String userId = 'marta.silva@worldit';
        String password = 'Carpediem123';
        String integratorsKey = 'MART-e4b6dd95-587c-4695-b180-8db5249745f8';
        //Set Authentication
        String auth = '<DocuSignCredentials><Username>'+ userId 
            +'</Username><Password>' + password 
            + '</Password><IntegratorKey>' + integratorsKey 
            + '</IntegratorKey></DocuSignCredentials>';
        
        dsApiSend.inputHttpHeaders_x = new Map<String, String>();
        dsApiSend.inputHttpHeaders_x.put('X-DocuSign-Authentication', auth);
        
        DocuSignAPI.Envelope envelope = new DocuSignAPI.Envelope();
        
        // Document
        DocuSignAPI.Document document = new DocuSignAPI.Document();
        document.ID = 1;
        Blob pdfBlob = EncodingUtil.base64Decode('teste');
        document.pdfBytes = EncodingUtil.base64Encode(pdfBlob);
        document.Name = 'Contract';
        document.FileExtension = 'pdf';
        envelope.Documents = new DocuSignAPI.ArrayOfDocument();
        envelope.Documents.Document = new DocuSignAPI.Document[1];
        envelope.Documents.Document[0] = document;
        
        List<DocuSignAPI.Recipient> recipientList = new List<DocuSignAPI.Recipient>();
        List<DocuSignAPI.Tab> tabList = new List<DocuSignAPI.Tab>();
        
        DocuSignAPI.Recipient Signer1 = new DocuSignAPI.Recipient();
        Signer1.ID = 1;
        Signer1.Type_x = 'Signer';
        Signer1.RoutingOrder = 1;
        Signer1.Email = 'email@teste.pt';
        Signer1.UserName = 'Nome';
        Signer1.RequireIDLookup = false;
        recipientList.add(Signer1);
        
        // Tab
        DocuSignAPI.Tab tab1 = new DocuSignAPI.Tab();
        tab1.Type_x = 'SignHere';
        tab1.RecipientID = 1;
        tab1.DocumentID = 1;
        tab1.XPosition = 220;
        tab1.YPosition = 765;
        tab1.PageNumber = 1;
        tabList.add(tab1);
        
        envelope.Recipients = new DocuSignAPI.ArrayOfRecipient();
        envelope.Recipients.Recipient = new DocuSignAPI.Recipient[recipientList.size()];
        envelope.Recipients.Recipient[0] = recipientList[0];
        
        envelope.Tabs = new DocuSignAPI.ArrayOfTab();
        envelope.Tabs.Tab = new DocuSignAPI.Tab[tabList.size()];
        envelope.Tabs.Tab[0] = tabList[0];
        
        //Riminder and expirations
        DocuSignAPI.Notification notification = new DocuSignAPI.Notification();
        DocuSignAPI.Reminders remind = new DocuSignAPI.Reminders();
        DocuSignAPI.Expirations expire = new DocuSignAPI.Expirations();
        
        remind.ReminderEnabled = true;
        remind.ReminderDelay = 2;
        remind.ReminderFrequency = 7;
        notification.Reminders = remind;
        
        expire.ExpireEnabled = true;
        expire.ExpireAfter = 30;
        notification.Expirations=expire;
        
        envelope.Subject = 'Teste';
        envelope.AccountId  = accountId;
                
        //DocuSignAPI.EnvelopeStatus es = dsApiSend.CreateAndSendEnvelope(envelope);
    }
    
    @isTest
    public static void testeDocuSignAPI_2() {
        
        //Getting DocuSignAPI Credentials
        List<Credentials__c> credential=[select Username__c, Password__c, AccountID__c, Web_Service_Url__c, integratorsKey__c from Credentials__c where name ='DocuSignAPI'];
        
        List<Attachment> contract = new List<Attachment>();
        boolean result=false;
        String webServiceUrl = credential[0].Web_Service_Url__c;
        String userId = credential[0].Username__c;
        String password = credential[0].Password__c;
        String integratorsKey = credential[0].integratorsKey__c;
        String accountId = credential[0].AccountID__c;
        
        DocuSignAPI.APIServiceSoap dsAPISend = new DocuSignAPI.APIServiceSoap();
        dsApiSend.endpoint_x = webServiceUrl;
        
        //Set Authentication
        String auth = '<DocuSignCredentials><Username>'+ userId 
            +'</Username><Password>' + password 
            + '</Password><IntegratorKey>' + integratorsKey 
            + '</IntegratorKey></DocuSignCredentials>';
        System.debug('Setting authentication to: ' + auth);
        
        dsApiSend.inputHttpHeaders_x = new Map<String, String>();
        dsApiSend.inputHttpHeaders_x.put('X-DocuSign-Authentication', auth);
        
        
        
        DocuSignAPI.RecipientCorrection recipientCorrection = new DocuSignAPI.RecipientCorrection();
        recipientCorrection.PreviousEmail = 'hugo.pereira@worldit.pt';
        recipientCorrection.CorrectedEmail = 'hugo.mdsp@gmail.com';
        
        
        DocuSignAPI.Correction corrections = new DocuSignAPI.Correction();
        corrections.EnvelopeID = 'f601335a-a6b2-4308-8ff1-3e57d032c74b';
        
        corrections.RecipientCorrections = New DocuSignAPI.ArrayOfRecipientCorrection();
        corrections.RecipientCorrections.RecipientCorrection = new DocuSignAPI.RecipientCorrection[1];
        corrections.RecipientCorrections.RecipientCorrection[0]=recipientCorrection;
        
        system.debug(corrections);
        /*DocuSignAPI.CorrectionStatus correctionStatus = dsAPISend.CorrectAndResendEnvelope(corrections);
        System.debug(correctionStatus);*/
    }
    
    @isTest
    public static void testeDocuSignAPI_3() {
        //Getting DocuSignAPI Credentials
        List<Credentials__c> credential=[select Username__c, Password__c, AccountID__c, Web_Service_Url__c, integratorsKey__c from Credentials__c where name ='DocuSignAPI'];
        
        List<Attachment> contract = new List<Attachment>();
        boolean result=false;
        Blob pdfBlob;
        String webServiceUrl = credential[0].Web_Service_Url__c;
        String userId = credential[0].Username__c;
        String password = credential[0].Password__c;
        String integratorsKey = credential[0].integratorsKey__c;
        String accountId = credential[0].AccountID__c;
        
        DocuSignAPI.APIServiceSoap dsAPISend = new DocuSignAPI.APIServiceSoap();
        dsApiSend.endpoint_x = webServiceUrl;
        
        //Set Authentication
        String auth = '<DocuSignCredentials><Username>'+ userId 
            +'</Username><Password>' + password 
            + '</Password><IntegratorKey>' + integratorsKey 
            + '</IntegratorKey></DocuSignCredentials>';
        System.debug('Setting authentication to: ' + auth);
        
        dsApiSend.inputHttpHeaders_x = new Map<String, String>();
        dsApiSend.inputHttpHeaders_x.put('X-DocuSign-Authentication', auth);
        
        DocuSignAPI.VoidEnvelopeStatus voidStatus = new DocuSignAPI.VoidEnvelopeStatus();
        /*voidStatus = dsAPISend.VoidEnvelope('da2e3cb7-ab9f-4def-a3c9-b03dcfa5518e','Cancelar envelope');
        system.debug(voidStatus);*/
        
    }
    
    @isTest
    public static void testeDocuSignAPI_triggers() {
        
         Account vendor = new Account();
        vendor.Name = 'Test Account Vendor'; 
        vendor.Type = 'Channel Partner / Vendor';
        vendor.NIF__c = '50363033023';
        vendor.c2g__CODABankIBANNumber__c = 'PT50001000003290869000185';
        vendor.Email__c='';
        insert vendor;     
        

        List<c2g__codaGeneralLedgerAccount__c> generalLedgerAcc = [SELECT id FROM c2g__codaGeneralLedgerAccount__c WHERE name = '21110 - CLIENTES NACIONAIS' ];
        
        if (generalLedgerAcc.size() == 0){

            c2g__codaGeneralLedgerAccount__c generalLedgerAcc1 = new c2g__codaGeneralLedgerAccount__c();
            generalLedgerAcc1.Name= '21110 - CLIENTES NACIONAIS';

            generalLedgerAcc1.c2g__ReportingCode__c='21110';
            generalLedgerAcc1.c2g__Type__c = 'Profit and Loss';
            insert generalLedgerAcc1;    
            
            ID glacc = generalLedgerAcc1.id;

            c2g__codaTaxCode__c tax = new c2g__codaTaxCode__c();
            tax.Name = 'textTax';
            tax.c2g__Description__c ='testTax description';   
            tax.c2g__GeneralLedgerAccount__c=glacc;   
            
            insert tax;
        
            //New Account Client
            Account client = new Account();
            client.Name = '2 Test Account Client'; 
            client.Type = 'Customer - Channel';
            client.NIF__c = '5007666303';
            client.c2g__CODABankIBANNumber__c = 'PT50004563904014640899590';
            client.c2g__CODAInputVATCode__c = tax.id; //'a3e24000000HWMt';
            client.c2g__CODAInvoiceEmail__c='teste@email.com';
            client.c2g__CODATaxCalculationMethod__c='Gross';
            client.c2g__CODAAccountsReceivableControl__c=glacc; 
            insert client;
            
            Application__c app1 = new Application__c();
            app1.AccClient__c = client.ID;
            app1.Vendor__c = vendor.ID;
            app1.Insurance_Type__c = 'Special Risk';
            app1.Issuing_Date_Invoice__c = Date.newInstance(2016, 6, 1);
            app1.Payment_Timing__c='Advanced';
            app1.Invoice_Payment_Date__c =Date.newInstance(2016, 9, 20);
            app1.TermCalc__c = 48;
            //app1.Vendor_Invoice_Amount__c = 2402.63;
            //app1.Equipment_Cost__c = 2402.63;
            app1.Insurance_Special_Value__c = 9.31;
            app1.Insurance_Movement_value__c = 11.01;
            app1.Client_BBAN__c = '004563904014640899590';
            app1.Payment_Freq__c ='Quarterly';
            app1.Payment_Amount__c = 2500;
            app1.Invoice_Payment_Date__c =date.today();
            insert app1;
            
            Test.startTest();  
            dsfs__DocuSign_Status__c ds = new dsfs__DocuSign_Status__c();
            ds.dsfs__Envelope_Status__c = 'Sent';
            ds.Docusign_Application_Status__c = app1.id;
            insert ds;
            Test.stopTest();  
        }
    }
}